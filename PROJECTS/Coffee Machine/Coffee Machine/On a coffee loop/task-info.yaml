type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\npublic class CoffeeMachine {\n\
    \    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
    \        int water = 400,milk = 540,coffee_beans =120,disp_cups=9,money=550;\n\
    \        printState(water,milk,coffee_beans,disp_cups,money);\n        System.out.printf(\"\
    Write action (buy, fill, take):%n\");\n        String action = scanner.next();\n\
    \        if(new String(action).equals(\"buy\")==true){\n            System.out.println(\"\
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino: \");\n     \
    \       int type = scanner.nextInt(); \n            switch(type){\n          \
    \      case 1:\n                    water -=250;\n                    coffee_beans\
    \ -=16;\n                    disp_cups--;\n                    money+=4;\n   \
    \                 break;\n                case 2:\n                    water -=350;\n\
    \                    milk-=75;\n                    coffee_beans -=20;\n     \
    \               disp_cups--;\n                    money+=7;\n                \
    \    break;\n                case 3:\n                    water -=200;\n     \
    \               milk-=100;\n                    coffee_beans -=12;\n         \
    \           disp_cups--;\n                    money+=6;\n                    break;\n\
    \            }\n            printState(water,milk,coffee_beans,disp_cups,money);\n\
    \        }\n        else if(new String(action).equals(\"take\")==true){\n    \
    \        System.out.printf(\"I gave you %d%n\",money);\n            money=0;\n\
    \            printState(water,milk,coffee_beans,disp_cups,money);\n        }\n\
    \        else if(new String(action).equals(\"fill\")==true){\n            System.out.println(\"\
    Write how many ml of water do you want to add:\");\n            water+=scanner.nextInt();\n\
    \            System.out.println(\"Write how many ml of milk do you want to add:\"\
    );\n            milk+=scanner.nextInt();\n            System.out.println(\"Write\
    \ how many grams of coffee beans do you want to add:\");\n            coffee_beans+=scanner.nextInt();\n\
    \            System.out.println(\"Write how many disposable cups of coffee do\
    \ you want to add:\");\n            disp_cups+=scanner.nextInt();\n          \
    \  printState(water,milk,coffee_beans,disp_cups,money);\n        }\n    }\n  \
    \  public static void printState(int water,int milk,int coffee_beans,int disp_cups,int\
    \ money){\n       System.out.println(\"The coffee machine has:\");\n        System.out.printf(\"\
    %d of water%n\",water);\n        System.out.printf(\"%d of milk%n\",milk);\n \
    \       System.out.printf(\"%d of coffee beans%n\",coffee_beans);\n        System.out.printf(\"\
    %d of disposable cups%n\",disp_cups);\n        System.out.printf(\"%d of money%n\"\
    ,money);\n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nThis test is exactly like in the example -\
    \ try to run it by yourself\n\nPlease find below the output of your program during\
    \ this failed test.\nNote that the &#39;&gt;&#39; character indicates the beginning\
    \ of the input line.\n\n---\n\nWrite action (buy, fill, take, remaining, exit):\n\
    &gt; remaining\nThe coffee machine has:\n400 of water\n540 of milk\n120 of coffee\
    \ beans\n9 of disposable cups\n$550 of money\n\nWrite action (buy, fill, take,\
    \ remaining, exit):\n&gt; buy\n\nWhat do you want to buy? 1 - espresso, 2 - latte,\
    \ 3 - cappuccino, back - to main menu: \n&gt; 2\nI have enough resources, making\
    \ you a coffee!\n\nWrite action (buy, fill, take, remaining, exit):\n&gt; buy\n\
    \nWhat do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to\
    \ main menu: \n&gt; 2\nSorry, not enough water!\n\nWrite action (buy, fill, take,\
    \ remaining, exit):\n&gt; fill\n\nWrite how many ml of water do you want to add:\n\
    &gt; 1000\nWrite how many ml of milk do you want to add:\n&gt; 0\nWrite how many\
    \ grams of coffee beans do you want to add:\n&gt; 0\nWrite how many disposable\
    \ cups of coffee do you want to add:\n&gt; 0\n\nWrite action (buy, fill, take,\
    \ remaining, exit):\n&gt; buy\n\nWhat do you want to buy? 1 - espresso, 2 - latte,\
    \ 3 - cappuccino, back - to main menu: \n&gt; 2\nI have enough resources, making\
    \ you a coffee!\n\nWrite action (buy, fill, take, remaining, exit):\n&gt; take\n\
    \nI gave you 571\n\nWrite action (buy, fill, take, remaining, exit):\n&gt; remaining\n\
    \nThe coffee machine has:\n350 of water\n315 of milk\n60 of coffee beans\n6 of\
    \ disposable cups\n$0 of money\n\nWrite action (buy, fill, take, remaining, exit):\n\
    &gt; exit"
  time: Mon, 26 Oct 2020 08:07:52 UTC
record: 4
